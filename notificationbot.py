import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz
import calendar
import json
from typing import List, Dict
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = 'Ins_Token'
TEAM_CHAT_ID = chat_id # –ö–æ–º–∞–Ω–¥–Ω—ã–π —á–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. Example -32737213
SERVICE_CHAT_ID = service_chat_id  # –ß–∞—Ç –¥–ª—è —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ä—Ç\—Å—Ç–æ–ø –∏ –¥—Ä—É–≥–∏—Ö —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤ –¥—Ä—É–≥–æ–π —á–∞—Ç
TIMEZONE = pytz.timezone('Europe/Moscow')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
scheduler = AsyncIOScheduler(timezone=TIMEZONE)

# –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–ø—Ä–∏–Ω—Ç–∞
SPRINT_START_DATE = datetime(2025, 4, 23, tzinfo=TIMEZONE)
SPRINT_DURATION_DAYS = 14

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
EVENTS_FILE = "events.json"

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
events_db: List[Dict] = []

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑ —Ñ–∞–π–ª–∞
def load_events():
    global events_db
    if os.path.exists(EVENTS_FILE):
        with open(EVENTS_FILE, "r", encoding="utf-8") as file:
            events_db = json.load(file)
    else:
        events_db = []

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤ —Ñ–∞–π–ª
def save_events():
    with open(EVENTS_FILE, "w", encoding="utf-8") as file:
        json.dump(events_db, file, ensure_ascii=False, indent=4)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ'))
    keyboard.add(KeyboardButton('–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π'))
    keyboard.add(KeyboardButton('–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ'))
    return keyboard

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
class EventStates(StatesGroup):
    waiting_for_event_name = State()
    waiting_for_event_date = State()
    waiting_for_event_time = State()
    waiting_for_event_repeat = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è —Å–ø—Ä–∏–Ω—Ç–∞
def calculate_sprint_day(current_date: datetime) -> int:
    if current_date < SPRINT_START_DATE:
        raise ValueError("–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ —Å–ø—Ä–∏–Ω—Ç–∞.")
    
    workday_count = 0
    current_day = SPRINT_START_DATE
    
    while current_day <= current_date:
        if current_day.weekday() < 5:
            workday_count += 1
        current_day += timedelta(days=1)
    
    current_sprint_day = (workday_count - 1) % SPRINT_DURATION_DAYS + 1
    return current_sprint_day

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π
def is_holiday(date: datetime) -> bool:
    holidays = ["2025-01-01", "2025-01-02", "2025-01-07", "2025-02-23", 
                "2025-03-08", "2025-05-01", "2025-05-09", "2025-06-12", 
                "2025-11-04"]
    return date.strftime("%Y-%m-%d") in holidays or date.weekday() >= 5

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
def generate_calendar(year: int, month: int) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(row_width=7)
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
    month_name = calendar.month_name[month]
    keyboard.row(InlineKeyboardButton(f"{month_name} {year}", callback_data="ignore"))
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.row(*[InlineKeyboardButton(day, callback_data="ignore") for day in week_days])
    # –î–Ω–∏ –º–µ—Å—è—Ü–∞
    month_calendar = calendar.monthcalendar(year, month)
    for week in month_calendar:
        row = []
        for day in week:
            if day == 0:
                row.append(InlineKeyboardButton(" ", callback_data="ignore"))
            else:
                date_str = f"{year}-{month:02d}-{day:02d}"
                row.append(InlineKeyboardButton(str(day), callback_data=f"date_{date_str}"))
        keyboard.row(*row)
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    prev_month = month - 1 if month > 1 else 12
    prev_year = year if month > 1 else year - 1
    next_month = month + 1 if month < 12 else 1
    next_year = year if month < 12 else year + 1
    keyboard.row(
        InlineKeyboardButton("‚Üê", callback_data=f"nav_{prev_year}_{prev_month}"),
        InlineKeyboardButton("‚Üí", callback_data=f"nav_{next_year}_{next_month}")
    )
    return keyboard

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–π–ª–∏–∫–µ
async def send_daily_notification():
    now = datetime.now(TIMEZONE)
    if is_holiday(now):
        return
    current_sprint_day = calculate_sprint_day(now)
    message = (
        f"–°–µ–≥–æ–¥–Ω—è {current_sprint_day}-–π –¥–µ–Ω—å —Å–ø—Ä–∏–Ω—Ç–∞.‚è∞ –ö–æ–ª–ª–µ–≥–∏, —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è daily!\n"
        f"–ü—Ä–∏–≥–ª–∞—à–∞—é –≤—Å–µ—Ö –≤ DION "
    )
    await bot.send_message(TEAM_CHAT_ID, message)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö
async def send_event_notifications():
    now = datetime.now(TIMEZONE)
    if is_holiday(now):
        return
    current_date = now.strftime("%Y-%m-%d")
    current_time = now.strftime("%H:%M")
    for event in events_db:
        if event['time'] == current_time:
            if event.get('repeat', False) or event.get('date', '') == current_date:
                await bot.send_message(TEAM_CHAT_ID, f"‚è∞ –°–æ–±—ã—Ç–∏–µ: {event['name']} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–µ–π—á–∞—Å!")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
async def cleanup_old_events():
    global events_db
    now = datetime.now(TIMEZONE)
    current_date = now.strftime("%Y-%m-%d")
    initial_count = len(events_db)
    events_db = [
        event for event in events_db
        if event.get('repeat', False) or event.get('date', '') >= current_date
    ]
    removed_count = initial_count - len(events_db)
    if removed_count > 0:
        save_events()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
        logging.info(f"–£–¥–∞–ª–µ–Ω–æ {removed_count} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ–±—ã—Ç–∏–π.")
        await bot.send_message(SERVICE_CHAT_ID, f"üßπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ {removed_count} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ–±—ã—Ç–∏–π.")

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø Scrum-–±–æ—Ç. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:",
        reply_markup=get_main_keyboard()
    )

# –ö–æ–º–∞–Ω–¥–∞ /sprint_status
@dp.message_handler(commands=['sprint_status'])
async def sprint_status(message: types.Message):
    now = datetime.now(TIMEZONE)
    current_sprint_day = calculate_sprint_day(now)
    await message.reply(f"–°–µ–≥–æ–¥–Ω—è {current_sprint_day}-–π –¥–µ–Ω—å —Å–ø—Ä–∏–Ω—Ç–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"
@dp.message_handler(lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ')
async def add_event_start(message: types.Message):
    await EventStates.waiting_for_event_name.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")

@dp.message_handler(state=EventStates.waiting_for_event_name)
async def add_event_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    now = datetime.now(TIMEZONE)
    await EventStates.next()
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è:",
        reply_markup=generate_calendar(now.year, now.month)
    )

@dp.callback_query_handler(lambda c: c.data.startswith('date_'), state=EventStates.waiting_for_event_date)
async def process_date(callback_query: types.CallbackQuery, state: FSMContext):
    date_str = callback_query.data.replace('date_', '')
    async with state.proxy() as data:
        data['date'] = date_str
    await EventStates.next()
    await bot.send_message(
        callback_query.from_user.id,
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00):"
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data.startswith('nav_'), state=EventStates.waiting_for_event_date)
async def process_navigation(callback_query: types.CallbackQuery, state: FSMContext):
    _, year, month = callback_query.data.split('_')
    await bot.edit_message_reply_markup(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=generate_calendar(int(year), int(month))
    )
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(state=EventStates.waiting_for_event_time)
async def add_event_time(message: types.Message, state: FSMContext):
    try:
        datetime.strptime(message.text, "%H:%M")
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00).")
        return
    async with state.proxy() as data:
        data['time'] = message.text
    await EventStates.next()
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ", callback_data="repeat_no"))
    keyboard.add(InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è", callback_data="repeat_yes"))
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith('repeat_'), state=EventStates.waiting_for_event_repeat)
async def process_repeat(callback_query: types.CallbackQuery, state: FSMContext):
    repeat = callback_query.data.replace('repeat_', '') == 'yes'
    async with state.proxy() as data:
        event = {
            'name': data['name'],
            'time': data['time'],
            'repeat': repeat
        }
        if not repeat:
            event['date'] = data['date']
        events_db.append(event)
        save_events()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–∞–π–ª
    await state.finish()
    await bot.send_message(
        callback_query.from_user.id,
        f"–°–æ–±—ã—Ç–∏–µ '{data['name']}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ {data['time']} ({'–ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è' if repeat else '–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ'})!",
        reply_markup=get_main_keyboard()
    )
    await bot.answer_callback_query(callback_query.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π"
@dp.message_handler(lambda message: message.text == '–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π')
async def list_events(message: types.Message):
    if not events_db:
        await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
    else:
        events_list = []
        for i, event in enumerate(events_db, 1):
            event_type = "üîÅ –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è" if event.get('repeat', False) else "üìÖ –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ"
            date_info = f" ({event['date']})" if 'date' in event else ""
            events_list.append(f"{i}. {event['name']} –≤ {event['time']}{date_info} - {event_type}")
        await message.reply("–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π:\n" + "\n".join(events_list))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"
@dp.message_handler(lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ')
async def delete_event_start(message: types.Message):
    if not events_db:
        await message.reply("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    else:
        keyboard = InlineKeyboardMarkup()
        for i, event in enumerate(events_db, 1):
            keyboard.add(InlineKeyboardButton(
                text=f"{i}. {event['name']} ({event['time']})",
                callback_data=f"delete_{i-1}"
            ))
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith('delete_'))
async def process_delete(callback_query: types.CallbackQuery):
    event_index = int(callback_query.data.replace('delete_', ''))
    if 0 <= event_index < len(events_db):
        deleted_event = events_db.pop(event_index)
        save_events()  # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        await bot.send_message(
            callback_query.from_user.id,
            f"–°–æ–±—ã—Ç–∏–µ '{deleted_event['name']}' —É–¥–∞–ª–µ–Ω–æ!",
            reply_markup=get_main_keyboard()
        )
    else:
        await bot.send_message(callback_query.from_user.id, "–û—à–∏–±–∫–∞: —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    await bot.answer_callback_query(callback_query.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
async def on_startup(dp):
    load_events()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    scheduler.start()
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω.")
    await bot.send_message(SERVICE_CHAT_ID, "–ë–æ—Ç \"–ú–§–û\" –¥–ª—è –ò–° 3624 –∑–∞–ø—É—â–µ–Ω!")

async def on_shutdown(dp):
    scheduler.shutdown()
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    await bot.send_message(SERVICE_CHAT_ID, "–ë–æ—Ç \"–ú–§–û\" –¥–ª—è –ò–° 3624 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# —É–∑–Ω–∞—Ç—å ID –≥—Ä—É–ø–ø—ã. –ü—Ä–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –≤—ã–∫–ª—é—á–∞—Ç—å. –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É. –°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º(—á—Ç–æ–±—ã –º–æ–≥ —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞) –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç, –ø–æ–π–º–∞—Ç—å –≤ –ª–æ–≥–∞—Ö —á–∞—Ç_–ò–î
#@dp.message_handler()
#async def get_chat_id(message: types.Message):
#    print(f"Group Chat ID: {message.chat.id}")

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler.add_job(
    send_daily_notification,
    trigger=CronTrigger(hour=9, minute=29),  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ 09:29 –ø–æ –ú–°–ö
)
scheduler.add_job(
    send_event_notifications,
    trigger=CronTrigger(minute="*"),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
)
scheduler.add_job(
    cleanup_old_events,
    trigger=CronTrigger(hour=0, minute=0),  # –û—á–∏—Å—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ –≤ –ø–æ–ª–Ω–æ—á—å
)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, on_startup=on_startup, on_shutdown=on_shutdown)
