#Импортируем библиотеки
import shutil
import os
import subprocess as sp
import subprocess
import shutil
import pybase64
import time
from pathlib import Path

#Получаем от пользователя CN, SAN, Тип хранилища, пароль к хранилищу. Нужное раскоментить. по умолчанию тип- jks пароль - changeit
certCn = input("Please, enter CN for the sertificate: ")
#san =  input("Please, enter alternative name or repeate CN: ")
#certKeyPass = input("Please, enter password store. 6 and more symbol: ")
#certKeyType = input("Please, choose keystore type, jks or pkcs12: ")
# Наполнение команды keytool
san = certCn
certAlias = 'usr'
certAlg = 'RSA'
certSigAlg = 'SHA256WithRSA'
certExp = '365'
certKeySize = '2048'
certKeyType = 'pkcs12'
certKeyPass = 'changeit'
fileName = 'keystore'
certOu = 'OU=MSG,'
certO = 'O=VTB Bank,'
certC = 'C=RU'
#Создаем папку на рабочем столе. Название папки соответствует CN
(Path.home() / "Desktop" / certCn).mkdir(parents=True, exist_ok=True)
file1 = "C:" + os.environ["HOMEPATH"] + "\\" + "Desktop" + "\\" + certCn
#Переходим в созданную папку на рабочем столе. Теперь это рабочий каталог программы
os.chdir(file1)
#Определяем текущий рабочий каталог. (папка на рабочем столе)
current_path = os.getcwd()
#Определяем каталог из которого запущена программа
pathcrt = os.path.dirname(__file__)
#Формируем полный путь до сертификатов
issu =  pathcrt +  "\\Test Environment Issuing CA 1.cer"
root =  pathcrt +"\\Test Environment Root CA.cer"
#Копируем промежуточный и корневой сертификаты из каталога с программой в папку на рабочем столе.
shutil.copy(issu, current_path)
shutil.copy(root, current_path)
#Создаем кейсторе
keytool = 'keytool -genkey \
            -alias ' + certAlias + ' \
            -keypass ' + certKeyPass + ' \
            -keyalg ' + 'RSA' + ' \
            -sigalg ' + 'SHA256WithRSA' + '\
            -validity ' + certExp + ' \
            -dname ' + '"' + 'CN=' + certCn +',' + certOu + certO + certC + '"' + ' \
            -keysize ' + '2048' + ' \
            -keystore ' + fileName + ' \
            -storepass '+ certKeyPass +' \
            -storetype  ' + certKeyType 
os.system(keytool)
#Определеяем название для файла "Запрос на сертификат"
reqcertCn = certCn + ".req"
#Создаем запрос на сертификат
keytool = 'keytool -certreq \
            -alias ' + certAlias + ' \
            -dname ' + '"' + 'CN=' + certCn +',' + certOu + certO + certC + '"' + ' \
            -ext ' + '"' + "SAN=dns:" + san + '"' + ' \
            -keystore ' + fileName  +' \
            -storepass '+ certKeyPass +' \
            -file '+  reqcertCn
os.system(keytool)
#Указываем какой программой открыть запрос на сертификат
programName = "notepad.exe"
#Открываем запрос на сертификат
#Выведенный текст на экран нужно перенести на ВРМ, и выполнить подписание в УЦ 
sp.Popen([programName, reqcertCn])
#Добавляем промежуточный сертификат в хранилище
keytool = 'keytool -noprompt -import \
            -trustcacerts ' + ' \
            -alias ' + "usrca1" + '\
            -keystore ' + fileName +' \
            -storepass '+ certKeyPass +' \
            -file '+ '"CN VTB Test Environment Issuing CA 1.cer"' 
os.system(keytool)
#Добавляем корневой сертификат в хранилище
keytool = 'keytool -noprompt -import \
            -trustcacerts ' + ' \
            -alias ' + "usrca" + '\
            -keystore ' + fileName +' \
            -storepass '+ certKeyPass +' \
            -file '+ '"CN VTB Test Environment Root CA.cer"' 
os.system(keytool)
#Печатаем уведомление пользователю
print("Подпишите запрос на сертификат в УЦ Банка\nТестовый УЦ расположен по адресу ")
print("После подписания укажите полный путь до сертификата, для добавления в хранилище и создания цепочки сертификатов.")
#Ожидаем ввода полного пути до сертификата.
filepath = input("Please, input path to the sertificate: ")
#Дописываем к пути имя сертификата и его расширение
pathcrt = filepath + '\\certnew.cer'
print(pathcrt)
#Копируем сертификат в рабочий каталог
shutil.copy(pathcrt, current_path)
#Добавляем сертификат в хранилище. 
keytool = 'keytool -noprompt -import \
            -alias ' + 'usr' + '\
            -keystore ' + 'keystore' +' \
            -storepass '+ certKeyPass +' \
            -file '+ pathcrt
os.system(keytool)
#Получаем текущее время
timestr = time.strftime("%H%M%S")
#Определяем текущий каталог
path = os.getcwd()
#Формируем полный путь до кейстора
filepath = path + "\\" + fileName
#Открываем файл для записи
with open(filepath, "rb") as file:
  readfile = file.read()
#Кодируем в BASE64
  encoded = pybase64.b64encode(readfile)
  result = open(('encoded' + timestr + '.txt'), 'wb') 
#Записываем результат кодирования
  result.write(encoded)
#Закрываем файл
  result.close()
#При желании можно печатать результат на экран
  #print(encoded)
#Делаем архив рабочего каталога. В каталоге будет:
# Кейстор
# Корневой и промежуточный сертификаты
# Файл запроса сертификата
# Файл содержащий кейстор в формате base64
shutil.make_archive(file1, 'zip', current_path)

#Открываем рабочий стол в проводнике
subprocess.Popen(f'explorer /select, {current_path}')
